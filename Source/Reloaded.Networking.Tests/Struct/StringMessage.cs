using System.Runtime.InteropServices;
using Reloaded.Messaging.Compression;
using Reloaded.Messaging.Messages;
using Reloaded.Messaging.Serialization;
using Reloaded.Messaging.Serializer.MessagePack;

namespace Reloaded.Messaging.Tests.Struct.MessagePack
{
    public struct StringMessage : IMessage<MessageType>
    {
        public MessageType GetMessageType() => MessageType.String;
        public ISerializer GetSerializer() => new MsgPackSerializer(true);
        public ICompressor GetCompressor() => null;

        [MarshalAs(UnmanagedType.BStr)]
        public string Text;

        public StringMessage(string text)
        {
            Text = text;
        }

        /* Auto Generated by R# */
        public bool Equals(StringMessage other)
        {
            return string.Equals(Text, other.Text);
        }

        public override bool Equals(object obj)
        {
            return obj is StringMessage other && Equals(other);
        }

        public override int GetHashCode()
        {
            return (Text != null ? Text.GetHashCode() : 0);
        }
    }
}
